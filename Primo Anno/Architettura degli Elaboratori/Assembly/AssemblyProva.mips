.data
pippo: .word 2,3,45,55,21,334
lungh: .word 6
.text
main:
add $sp, $sp, -24
sw $ra,4($sp)
la $a0, pippo
la $t0, lungh
lw $a1, 0($t0)

jal cerca_minimo
move $a0, $v0
li $v0,1
lw $ra,4($sp)
addi $sp,$sp,24
jr $ra

cerca_minimo:
addi $sp, $sp, -64
sw $ra,4($sp)
# 8($sp)minimo_corrente
# 12($sp)indice
# 16($sp)primoNumeroComparazione
# 20($sp)secondoNumeroComparazione
# 24($sp)baseAddressArray
# 28($sp)elementiArray
sw $a0, 24($sp)
sw $a1, 28($sp)

li $t0,0
li $t0,12($sp)
lw $t1,4
li $ti1,4
mul $t0,$t1,$t0
lw $t1, 24($sp)
#in t0 c'Ã¨ il puntatore puntatore elemento array + base array address + indice *
# dimensione de
add $t0,$t0,$t1
lw $a1,0($t0)
lw $a0,8($sp)

jal comparaDueValori
sw $v0, 8($sp)
lw $t0, 12($sp)
addi $t0,$t0,1
lw $t1,28($sp)
bne $t0, $t1,loop
lw $ra,4($sp)
addi $sp,$sp,64
jr $ra


comparaDueValori
slt $t0, $a0, $a1
#se $t0 = 0 allora $a0 = minimo , devo restituire $a0
beq $t0, $zero ,pippo
move $v0, $a1

pippo:
j exit
pippo:
move $v0, $a0
exit:
jr $ra
